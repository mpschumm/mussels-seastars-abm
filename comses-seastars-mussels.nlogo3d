turtles-own [energy]

breed [seastars seastar]
breed [mussels mussel]
breed [disturbances disturbance]

extensions [palette
]

patches-own [elevation
; Days since point in space was disturbed. plabel_disturb is "" for a cell with recruitable substrate (all cells in the model start recruitable by default).
plabel_disturb
; Disturbance intensity - distance from disturbance origin, proportional to amount of time needed for recruitable substrate to recover
recover
]

mussels-own [
  ; The size of the mussel in centimeters, which are 1/7.184th of NL model patch units
  musselsize
  ; How many days has the mussel been alive?
  birthtick
  ; At what xcor was the mussel "born" (recruited into the model)?
  birth_level
]

seastars-own [
  ; The diameter of the seastar in centimeters, which are 1/7.184th of NL model patch units
  starsize
  ; Upper limit of mussel sizes that the seastar can consume
  staru
  ; Lower limit of mussel sizes that the seastar can consume
  starl
]

disturbances-own [
  ; The square root of the area of the patch being disturbed
  intensity
]

globals[
; Number of mussels, randomly spread out across the space, at the beginning of the model run
starting-mussels
; Size (radius) of patch of mussels ripped up from rock by introduction of a disturbance
disturbance-intensities
; At 0.1, a seastar has equal probability of moving downward or upward when at lowest depth (1m. above MLLW). At lower values, it has a preference for moving down even at the lowest depth
; https://academo.org/demos/3d-surface-plotter/?expression=exp((3.25*x)-(0.1)*(x*y))%2F(1%2Bexp((3.25*x)-(0.1)*(x*y)))&xRange=-1%2C+1&yRange=0%2C+33&resolution=19
seastar-desiccation-coef
; Max predation intensity (seastar eats every mussel it can find with handling time of 1 day/1 tick) is 25, higher values = lower predation
predation-intensity
; Higher values = lower chance of a disturbance being introduced at a time step
disturbance-freq
; Higher values -> higher thickness allowed for a given depth/tide height/submergence time
bed-thickness
; k in the von Bertalanffy growth function
growth-param
; Higher protection = neighboring mussels are treated as larger and thus as giving more protection against mortality, *and* more protection against predation if neighbor size*predation exceeds seastar prey size cutoff ('protection' set to 0 -> no protective neighbor effects)
protection
; Whether to have protection against mortality by neighbors (assuming some moisture "footprint" effect protecting against mortality by heat or desiccation)
use_protected_amount
]

to setup
  resize-world -66 66 -132 132 -16 16
  setup-turtles
  reset-ticks
  ask patches [
  set plabel_disturb ""
  if pzcor > -16
    [set elevation pxcor]
  ]
  ask patches [
  if pzcor = -16
    [set elevation pxcor]
  ]
  ask patches [
   if pzcor = -16
   [ set pcolor scale-color grey elevation -66 66 ]]
  ; 6.5 = mean of lognormal distribution of disturbed patch areas from Paine Levin 1981 Eco Mono
   set disturbance-intensities 0 ; 6.5
   set seastar-desiccation-coef 0.1
   set starting-mussels 10000
   set disturbance-freq 10000000
  ; 10000 should make sense
     ; except that frequency was too frequent because it was set by outlier years, use 10000000
  ; Paine and Levin 81 Eco Mono – S. Island mean 0.99 monthly percent cleared – 0.99 + 0.99^2 + ... = 5.79% cleared per 6 mos.
  ; 0.0003 probability per patch per day
  ; Because the p=0.0579 and the mean np = 5.79% of n (Binom RV)
  ; random 10,000 < 4
   set predation-intensity 25
  ; von Bertalanffy growth curve from Robles et al. 2010
   set growth-param (-0.0007)
   set bed-thickness 1
   set protection 1
  set use_protected_amount protection
end

; space is 10x20 m., 132x264 in NetLogo patch side length units
; 7.184 cm. per NetLogo patch side length unit

to setup-turtles
  create-seastars 10
  ask seastars [ setxyz -66 random-ycor -15 ]
  ask seastars [ set color orange ]
  ask seastars [ set starsize ( (random-normal 20 6) ) ]
  ask seastars [ set size starsize / 7.184 ]
  ask seastars [ set starl (-8.66) + (0.35 * starsize) ]
  ask seastars [ set staru (-1.34) + (0.55 * starsize) ]
  ; can start with some number of mussels already present by setting 'starting-mussels'
  create-mussels starting-mussels
  ask mussels [ setxyz random-xcor random-ycor -15 ]
  ask mussels [ set color blue
  set shape "circle"
  ]
  ask mussels [ set birthtick 500 ]
  ask mussels [
     set musselsize 0.039 + ((((( -1 * [elevation] of patch-at 0 0 0) + 67) / 132 ) * 15 ) + 1) * ( 1 - exp(growth-param * birthtick))
   ; because 0.039 is in cm
    set size  ((musselsize *  0.34345) + 0.635338) / 7.184
  ]

end

to go
  ; 1. Mussels are allowed to move.
  slide
  ; 2. New mussels recruited.
  recruit-mussels
  ; 3-4. Seastar movement and feeding.
  move-seastars
  eat-food
  ask seastars [
    let biomass-laststep energy
    if  (ycor < -131) or (ycor > 131) or (([pxcor] of patch-ahead 1  > 65 ) and ([pxcor] of patch-at 0 0 0  < -65.5)) [
      ; if energy was nothing is definitely leaving (p = 1)
      if biomass-laststep < 5
        [
         ;output-print biomass-laststep
         die

      ]
    ]
  ]

  ; (2*(133)+2*(66))= 398

  ; Robles et al. 2010 supplement -> mean of Poisson no. seastars drawn from = no. squares to be entered * 0.01 * time step length (1)

  ; Seastars enter at the lower boundary
        create-seastars (random-poisson 3.98) [
        set color orange
        set starsize ( (random-normal 20 6)  )
        set size starsize / 7.184
        setxyz -66 random-ycor -15
        set starl (-8.66) + (0.35 * starsize)
        set staru (-1.34) + (0.55 * starsize)
        ]
  ; Added time step for sea star movement per Donahue et al. 2011
  move-seastars
  eat-food
  ask seastars [
    let biomass-laststep energy
    if  (ycor < -131) or (ycor > 131) or (([pxcor] of patch-ahead 1  > 65 ) and ([pxcor] of patch-at 0 0 0  < -65.5)) [
      ; if energy was nothing is definitely leaving (p = 1)
      if biomass-laststep < 5
        [
         ;output-print biomass-laststep
         die

      ]
    ]
  ]

        create-seastars (random-poisson 3.98) [
        set color orange
        set starsize ( (random-normal 20 6)  )
        set size starsize / 7.184
        setxyz -66 random-ycor -15
        set starl (-8.66) + (0.35 * starsize)
        set staru (-1.34) + (0.55 * starsize)
  ]



  ; 5. Mussels grow (and die)
  grow-mussels
  ; 6. Disturbances are introduced.
  ask patches [
  if (((random disturbance-freq) < 4 ) and (disturbance-intensities > 0)) [
  let xcor-disturbance 0
  let ycor-disturbance 0
  let disturbance-intensity 0
  sprout-disturbances 1 [
  setxyz random-xcor random-ycor -15
  set intensity (sqrt( ( exp( disturbance-intensities + 2.5 * (random-normal 0 1 ) ) ) )) / 7.184
  ; divide intensity by 7.184 to convert it to the units of the NL space
  let current-animal self
  ; function depends on patch nearest i. e. spreads outward
  set xcor-disturbance [xcor] of current-animal
  set ycor-disturbance [ycor] of current-animal
  set disturbance-intensity [intensity] of current-animal

  ; The disturbance only has effects if it hits a cell with mussels already on it.
  ask current-animal [ if (count mussels-here > 0) [

    ask mussels [ if (disturbance-intensity) > sqrt( ((ceiling (abs (([ycor] of self) - (ycor-disturbance)) )) ^ 2) + ((ceiling (abs (([xcor] of self) - (xcor-disturbance)) )) ^ 2) ) [
    ask patch-at 0 0 0  [
        set plabel_disturb 1
        set recover disturbance-intensity -  sqrt( ((ceiling (abs (([pycor] of self) - (ycor-disturbance)) )) ^ 2) + ((ceiling (abs (([pxcor] of self) - (xcor-disturbance)) )) ^ 2) )
      ]
      ;output-print "xcor, ycor of mussel removed by disturbance"
      ;output-print [pxcor] of patch-here
      ;output-print [pycor] of patch-here
      die
      ]
  ]
  ]]
  ;output-print "xcor-disturbance, ycor, and disturbance intensity"
  ;output-print xcor-disturbance
  ;output-print ycor-disturbance
  ;output-print disturbance-intensity
  set xcor-disturbance 0
  ]
  ]
  ]
  ; Re-setting cell count of time since disturbance and comparing to recovery time for recruitable substrate
  ask patches [if (is-number? plabel_disturb) [ set plabel_disturb (plabel_disturb + 1)]]
  ask patches [if (is-number? plabel_disturb)[ if plabel_disturb > ( 1460 * (recover / 8) ) [ set plabel_disturb ""]]]
  tick
end

to grow-mussels
  ask mussels [
    set birthtick birthtick + 1
    if (count mussels in-radius ( size )) < 2 [
    let L_inf ((((( -1 * [elevation] of patch-at 0 0 0) + 67) / 132 ) * 15 ) + 1)
    let possible_new_musselsize 0.039 + L_inf * ( 1 - exp(growth-param * birthtick))
     ; because 0.039 is in cm
     if musselsize < possible_new_musselsize [
     set musselsize possible_new_musselsize
     ; conversion of length to width based on measurement of Wootton lab field specimens by M. Schumm
     set size  ((musselsize *  0.34345) + 0.635338) / 7.184
     ]
  ]]
end

to slide
ask mussels [
    ; push down but not up
    let current-animal self
    right random 360
    ; Mussel being pushed by adjoining mussels into adjacent empy area
    ; it should be likelier, but by how much
    if ((any? mussels in-radius ( size ) ) and  ((not any? mussels-on patch-ahead 1) or (  ([pxcor] of patch-ahead 1) > 65   )) ) [
      ; can only be pushed if under a certain size
      ; Addition rule: (probability of transition from unoccupied to mussel at a point *given mussel neighbors*) - (probability of transition from unoccupied to mussel at a point *without mussel neighbors*) is probability of space being filled by mussel being pushed into it by other mussels
      if (musselsize < 8) and ( random 1538 < 2) [
        let before [xcor] of current-animal
        forward 1


        if ([xcor] of current-animal > 65) and (before < -64)
        [ ask current-animal [die]]
        if ([xcor] of current-animal < -65) and (before > 64)
        [ ask current-animal [die]]
      ]
      ]
  ]
  ; "Rolling" adult mussels (9/2019)
  if any? mussels with [musselsize > 4]  [
    ask patches [
    if (random 1000000 < 4) [
        if pzcor = -15 [
        let roller-size 0
    let roller-birthtick 0
    let roller-birth_level 0
    if any? mussels with [musselsize > 4] [
        ask one-of mussels with [musselsize > 4] [
        set roller-size [musselsize] of self
        set roller-birthtick [birthtick] of self
        set roller-birth_level [birth_level] of self
        die
      ]
    sprout-mussels 1
        [ set color blue
          set shape "circle"
          set size ((roller-size *  0.34345) + 0.635338) / 7.184
          set musselsize roller-size
          set birthtick roller-birthtick
          set birth_level roller-birth_level
           ;output-print "roller"
    if (any? mussels-on ([neighbors] of myself)) or (any? mussels-on patch-at 0 0 0)  [
            if (count mussels in-radius ( size )) > 1 [
              die
              ]
            ]
          ]
        ]
        ]
  ]
  ]
  ]
end

to recruit-mussels
  ask patches [
     if pzcor = -15 [
    ; Approximation to A. Kandur (2014) per cm2. recruitment rate
      if random (250    )  < 2 [
        sprout-mussels 1
        [ set color blue
          set shape "circle"
          set size ( (0.039 *  0.34345) + 0.635338 ) / 7.184
          set musselsize 0.039
          set birthtick 0
          set xcor random-xcor
          set ycor random-ycor
          set birth_level [pxcor] of patch-at 0 0 0
          if ( is-number? ([plabel_disturb] of patch-here)) [
           ; output-print ( is-number? ([plabel_disturb] of patch-at 0 0 0))
            die]
          ; New mussel cannot occupy already occupied space
          if (any? mussels-on ([neighbors] of myself)) or (any? mussels-on patch-at 0 0 0)  [
            if (count mussels in-radius ( size )) > 1 [
              die
              ]
            ]
          ]
    ]

    ]
  ]
  ; Mussels can also stack on top of other mussels
  ask patches [
     if pzcor > -15 [
    if (any? mussels-on (patch-at 0 0 -1)) and (not any? mussels-on patch-at 0 0 0) [
        if random (250) < 2 [
            let subtime ((((-1 * [elevation] of patch-at 0 0 0 ) + 67) / 132) * 0.548) + 0.069
           set subtime (subtime * bed-thickness)
          ; thickness-at is the thickness at a given point in the bed already
          let thickness-at 0
          let increment 1
          ; predicted size of a mussel coming in once it grows to full size at this depth/tide height level
          let steady-state-sizes ((((( -1 * [elevation] of patch-at 0 0 0) + 67) / 132 ) * 15 ) + 1)
          while [ (any? mussels-on (patch-at 0 0 (-1 * increment)))]
            [
              ; If the mussel size of the largest mussel on the patch below is an adult, >2cm.
              ifelse ( ([musselsize] of (max-one-of mussels-on (patch-at 0 0 (-1 * increment)) [size]) > 2)  )
              [ set thickness-at thickness-at + [musselsize] of (max-one-of mussels-on (patch-at 0 0 (-1 * increment)) [size])]
              [ set thickness-at 0]
              set increment increment + 1
            ]

          ; If-else block, allowing stacking *if* it does not exceed predicted thickness for that site by curve from Kandur (2014)
          ifelse (log (thickness-at + steady-state-sizes) e) < (0.95 + 2.54 * (subtime))  [

            sprout-mussels 1
        [ set color blue
          set color blue
          set shape "circle"
          set size ((0.039 *  0.34345) + 0.635338) / 7.184
          set musselsize 0.039
          set birthtick 0
          output-print "mussel coming in above"
          ;output-print xcor
          ;output-print ycor
           set birth_level [pxcor] of patch-at 0 0 0
            ; New mussel cannot occupy already occupied space
          if (any? mussels-on ([neighbors] of myself)) or (any? mussels-on patch-at 0 0 0)  [
            if (count mussels in-radius ( size )) > 1 [
              ;output-print "number of mussels that were surrounding this mussel so it did not recruit:"
              ;output-print (count mussels in-radius ( size ))
              die
              ]
            ]
            if ((count (mussels-on patch-at 0 0 -1) with [(distancexy ([xcor] of self) ([ycor] of self) < 0.12)]) < 1)  [
            if (count mussels in-radius ( size )) > 1 [
              ;output-print "This mussel did not actually come in above another mussel"
              ;output-print thickness-at
              die
              ]
            ]
        ]
        ]
           [output-print "failed to stack"
            ;output-print thickness-at
            ;output-print log(steady-state-sizes) e
            ;output-print (0.95 + 2.54 * (subtime))
            ;output-print [elevation] of patch-at 0 0 0

          ]
    ]
    ]
  ]
  ]

; survivorship conversions: https://ncss-wpengine.netdna-ssl.com/wp-content/themes/ncss/pdf/Procedures/NCSS/Survival_Parameter_Conversion_Tool.pdf

  ask patches [
     if pzcor > -17 [
    if any? mussels-on patch-at 0 0 0 [
        let todie one-of mussels-at 0 0 0
        ; adding some protection for mussels surrounded by other mussels (they are ketp cooler, wetter)
        let protected_amount (-0.03)
        if any? mussels-on ([neighbors] of todie) [
    set protected_amount ( (([musselsize] of (max-one-of (mussels-on ([neighbors] of todie)) [musselsize])) * protection )    )
      ]
        set protected_amount (protected_amount - 3)
        let subtime ((((-1 * [elevation] of patch-at 0 0 0 ) + 67) / 132) * 0.548) + 0.069 + (protected_amount * use_protected_amount / 100)
        let inradians (asin(sqrt(subtime) ) * pi) / 180
        ; mortality
        let factor exp( 8.3442 + (1.242 * ln(inradians ) ) )
          if  ([musselsize] of todie < 0.2 and random 1000000 <   (((1 - exp(-1 * (1 / 1.9 ) )) * 1000000) + ((1 - exp(-1 * (1 / factor ) )) * 1000000)) / 2    ) or ([musselsize] of todie > 0.2 and random 1000000 < ((1 - exp(-1 * (1 / factor ) )) * 1000000) ) [
          output-print "died from natural causes"
          ask todie [die ]]
    ]
  ]
  ]
; When mussels die, this moves the mussels potentially stacked above them down a level in z, closer to rock surface
 ask mussels [
    while [([pzcor] of patch-at 0 0 0 > -15)  and ((count (mussels-on patch-at 0 0 -1) with [(distancexy ([xcor] of self) ([ycor] of self) < 0.12)]) < 1)  ] [
    tilt-down 90
    forward 1
    tilt-up 90
]
]
end

to move-seastars
  ask seastars [
      right random 360
    ; Check if movement will take seastar out of the space - if not, there is some probability of moving
    if ( abs ( abs ([elevation] of patch-ahead 1 ) - abs([elevation] of patch-at 0 0 0)) > 0 ) [
    let depth (((-1 * [pxcor] of patch-ahead 1 ) + 67 ) / 132) * 34
    let delta ((-1 * [pxcor] of patch-ahead 1 ) + 67 ) - ((-1 * [pxcor] of patch-at 0 0 0 ) + 67 )
    let p ( ( 3.25 * delta ) - (seastar-desiccation-coef) * ( delta * depth ) )
    ; divide by 200 to get random number between 0-1 with at least 2 decimal placed
    if (( (random 200) / 200 ) < ((exp(p))/(1 + exp(p))))
    [
        forward 1
    ]
    ]
    ; Seastar should be on top of mussel layer(s)
    if any? mussels-on patch-at 0 0 0 [
      while [(any? mussels-on patch-at 0 0 0) and (any? mussels-on patch-at 0 0 1) ]
      [tilt-up 90
        forward 1
      tilt-down 90
      ]
    ; But they should not be floating above the mussel bed
    while [(not any? mussels-on patch-at 0 0 0) and ([pzcor] of patch-ahead 1 > -15 ) ]
    [tilt-down 90
    forward 1
    tilt-up 90
    ]
    ]
    if (any? mussels-on patch-at 0 0 -1) and (not any? mussels-on patch-at 0 0 0) [
    tilt-down 90
    forward 1
    tilt-up 90
    ]
    while [(not any? mussels-on patch-at 0 0 0) and ([pzcor] of patch-ahead 1 > -15 ) ]
    [tilt-down 90
    forward 1
    tilt-up 90
    ]
  ]
end

to eat-food
  ask seastars [
    let upper staru
    let prey one-of mussels-here
    let protected_yn false
    if prey != nobody [
      if any? mussels-on ([neighbors] of prey) [
    set protected_yn ( (([musselsize] of (max-one-of (mussels-on ([neighbors] of prey)) [musselsize])) * protection )  > upper  )
      ]
      ; toggle
      if protected_yn = false [
       ask prey [set color blue]
        let deadlength [musselsize] of prey
        if ((random ((8 / (1 + protection * sum [count mussels-here] of neighbors)) * 1000000)) / 1000000) < (200 / predation-intensity) [ if ( [musselsize] of prey > starl) and ([musselsize] of prey < staru) [
          ;output-print [xcor] of prey
          ask prey [die]
        ] ]
      set energy  exp( -0.747 + ( 0.038 * (deadlength / 0.1) ))
      ]
    ]
  ]
end
@#$#@#$#@
GRAPHICS-WINDOW
0
0
1737
3454
-1
-1
13.0
1
10
1
1
1
0
1
1
1
-66
66
-132
132
-16
16
1
1
1
ticks
30.0

BUTTON
13
15
79
48
NIL
setup
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

BUTTON
110
33
173
66
NIL
go
T
1
T
OBSERVER
NIL
NIL
NIL
NIL
0

SWITCH
54
207
198
240
show-energy?
show-energy?
0
1
-1000

PLOT
237
86
437
236
Seastars
NIL
NIL
0.0
10.0
0.0
10.0
true
false
"" ""
PENS
"default" 1.0 0 -955883 true "" "plot count seastars"

PLOT
499
94
699
244
Mussels
NIL
NIL
0.0
10.0
0.0
10.0
true
false
"" ""
PENS
"default" 1.0 0 -7500403 true "" "plot count mussels"

@#$#@#$#@
## WHAT IS IT?

(a general understanding of what the model is trying to show or explain)

## HOW IT WORKS

(what rules the agents use to create the overall behavior of the model)

## HOW TO USE IT

(how to use the model, including a description of each of the items in the Interface tab)

## THINGS TO NOTICE

(suggested things for the user to notice while running the model)

## THINGS TO TRY

(suggested things for the user to try to do (move sliders, switches, etc.) with the model)

## EXTENDING THE MODEL

(suggested things to add or change in the Code tab to make the model more complicated, detailed, accurate, etc.)

## NETLOGO FEATURES

(interesting or unusual features of NetLogo that the model uses, particularly in the Code tab; or where workarounds were needed for missing features)

## RELATED MODELS

(models in the NetLogo Models Library and elsewhere which are of related interest)

## CREDITS AND REFERENCES

(a reference to the model's URL on the web if it has one, as well as any other necessary credits, citations, and links)
@#$#@#$#@
default
true
0
Polygon -7500403 true true 150 5 40 250 150 205 260 250

airplane
true
0
Polygon -7500403 true true 150 0 135 15 120 60 120 105 15 165 15 195 120 180 135 240 105 270 120 285 150 270 180 285 210 270 165 240 180 180 285 195 285 165 180 105 180 60 165 15

arrow
true
0
Polygon -7500403 true true 150 0 0 150 105 150 105 293 195 293 195 150 300 150

box
false
0
Polygon -7500403 true true 150 285 285 225 285 75 150 135
Polygon -7500403 true true 150 135 15 75 150 15 285 75
Polygon -7500403 true true 15 75 15 225 150 285 150 135
Line -16777216 false 150 285 150 135
Line -16777216 false 150 135 15 75
Line -16777216 false 150 135 285 75

bug
true
0
Circle -7500403 true true 96 182 108
Circle -7500403 true true 110 127 80
Circle -7500403 true true 110 75 80
Line -7500403 true 150 100 80 30
Line -7500403 true 150 100 220 30

butterfly
true
0
Polygon -7500403 true true 150 165 209 199 225 225 225 255 195 270 165 255 150 240
Polygon -7500403 true true 150 165 89 198 75 225 75 255 105 270 135 255 150 240
Polygon -7500403 true true 139 148 100 105 55 90 25 90 10 105 10 135 25 180 40 195 85 194 139 163
Polygon -7500403 true true 162 150 200 105 245 90 275 90 290 105 290 135 275 180 260 195 215 195 162 165
Polygon -16777216 true false 150 255 135 225 120 150 135 120 150 105 165 120 180 150 165 225
Circle -16777216 true false 135 90 30
Line -16777216 false 150 105 195 60
Line -16777216 false 150 105 105 60

car
false
0
Polygon -7500403 true true 300 180 279 164 261 144 240 135 226 132 213 106 203 84 185 63 159 50 135 50 75 60 0 150 0 165 0 225 300 225 300 180
Circle -16777216 true false 180 180 90
Circle -16777216 true false 30 180 90
Polygon -16777216 true false 162 80 132 78 134 135 209 135 194 105 189 96 180 89
Circle -7500403 true true 47 195 58
Circle -7500403 true true 195 195 58

circle
false
0
Circle -7500403 true true 0 0 300

circle 2
false
0
Circle -7500403 true true 0 0 300
Circle -16777216 true false 30 30 240

cow
false
0
Polygon -7500403 true true 200 193 197 249 179 249 177 196 166 187 140 189 93 191 78 179 72 211 49 209 48 181 37 149 25 120 25 89 45 72 103 84 179 75 198 76 252 64 272 81 293 103 285 121 255 121 242 118 224 167
Polygon -7500403 true true 73 210 86 251 62 249 48 208
Polygon -7500403 true true 25 114 16 195 9 204 23 213 25 200 39 123

cylinder
false
0
Circle -7500403 true true 0 0 300

dot
false
0
Circle -7500403 true true 90 90 120

face happy
false
0
Circle -7500403 true true 8 8 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Polygon -16777216 true false 150 255 90 239 62 213 47 191 67 179 90 203 109 218 150 225 192 218 210 203 227 181 251 194 236 217 212 240

face neutral
false
0
Circle -7500403 true true 8 7 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Rectangle -16777216 true false 60 195 240 225

face sad
false
0
Circle -7500403 true true 8 8 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Polygon -16777216 true false 150 168 90 184 62 210 47 232 67 244 90 220 109 205 150 198 192 205 210 220 227 242 251 229 236 206 212 183

fish
false
0
Polygon -1 true false 44 131 21 87 15 86 0 120 15 150 0 180 13 214 20 212 45 166
Polygon -1 true false 135 195 119 235 95 218 76 210 46 204 60 165
Polygon -1 true false 75 45 83 77 71 103 86 114 166 78 135 60
Polygon -7500403 true true 30 136 151 77 226 81 280 119 292 146 292 160 287 170 270 195 195 210 151 212 30 166
Circle -16777216 true false 215 106 30

flag
false
0
Rectangle -7500403 true true 60 15 75 300
Polygon -7500403 true true 90 150 270 90 90 30
Line -7500403 true 75 135 90 135
Line -7500403 true 75 45 90 45

flower
false
0
Polygon -10899396 true false 135 120 165 165 180 210 180 240 150 300 165 300 195 240 195 195 165 135
Circle -7500403 true true 85 132 38
Circle -7500403 true true 130 147 38
Circle -7500403 true true 192 85 38
Circle -7500403 true true 85 40 38
Circle -7500403 true true 177 40 38
Circle -7500403 true true 177 132 38
Circle -7500403 true true 70 85 38
Circle -7500403 true true 130 25 38
Circle -7500403 true true 96 51 108
Circle -16777216 true false 113 68 74
Polygon -10899396 true false 189 233 219 188 249 173 279 188 234 218
Polygon -10899396 true false 180 255 150 210 105 210 75 240 135 240

house
false
0
Rectangle -7500403 true true 45 120 255 285
Rectangle -16777216 true false 120 210 180 285
Polygon -7500403 true true 15 120 150 15 285 120
Line -16777216 false 30 120 270 120

leaf
false
0
Polygon -7500403 true true 150 210 135 195 120 210 60 210 30 195 60 180 60 165 15 135 30 120 15 105 40 104 45 90 60 90 90 105 105 120 120 120 105 60 120 60 135 30 150 15 165 30 180 60 195 60 180 120 195 120 210 105 240 90 255 90 263 104 285 105 270 120 285 135 240 165 240 180 270 195 240 210 180 210 165 195
Polygon -7500403 true true 135 195 135 240 120 255 105 255 105 285 135 285 165 240 165 195

line
true
0
Line -7500403 true 150 0 150 300

line half
true
0
Line -7500403 true 150 0 150 150

pentagon
false
0
Polygon -7500403 true true 150 15 15 120 60 285 240 285 285 120

person
false
0
Circle -7500403 true true 110 5 80
Polygon -7500403 true true 105 90 120 195 90 285 105 300 135 300 150 225 165 300 195 300 210 285 180 195 195 90
Rectangle -7500403 true true 127 79 172 94
Polygon -7500403 true true 195 90 240 150 225 180 165 105
Polygon -7500403 true true 105 90 60 150 75 180 135 105

plant
false
0
Rectangle -7500403 true true 135 90 165 300
Polygon -7500403 true true 135 255 90 210 45 195 75 255 135 285
Polygon -7500403 true true 165 255 210 210 255 195 225 255 165 285
Polygon -7500403 true true 135 180 90 135 45 120 75 180 135 210
Polygon -7500403 true true 165 180 165 210 225 180 255 120 210 135
Polygon -7500403 true true 135 105 90 60 45 45 75 105 135 135
Polygon -7500403 true true 165 105 165 135 225 105 255 45 210 60
Polygon -7500403 true true 135 90 120 45 150 15 180 45 165 90

sheep
false
15
Circle -1 true true 203 65 88
Circle -1 true true 70 65 162
Circle -1 true true 150 105 120
Polygon -7500403 true false 218 120 240 165 255 165 278 120
Circle -7500403 true false 214 72 67
Rectangle -1 true true 164 223 179 298
Polygon -1 true true 45 285 30 285 30 240 15 195 45 210
Circle -1 true true 3 83 150
Rectangle -1 true true 65 221 80 296
Polygon -1 true true 195 285 210 285 210 240 240 210 195 210
Polygon -7500403 true false 276 85 285 105 302 99 294 83
Polygon -7500403 true false 219 85 210 105 193 99 201 83

square
false
0
Rectangle -7500403 true true 30 30 270 270

square 2
false
0
Rectangle -7500403 true true 30 30 270 270
Rectangle -16777216 true false 60 60 240 240

star
false
0
Polygon -7500403 true true 151 1 185 108 298 108 207 175 242 282 151 216 59 282 94 175 3 108 116 108

target
false
0
Circle -7500403 true true 0 0 300
Circle -16777216 true false 30 30 240
Circle -7500403 true true 60 60 180
Circle -16777216 true false 90 90 120
Circle -7500403 true true 120 120 60

tree
false
0
Circle -7500403 true true 118 3 94
Rectangle -6459832 true false 120 195 180 300
Circle -7500403 true true 65 21 108
Circle -7500403 true true 116 41 127
Circle -7500403 true true 45 90 120
Circle -7500403 true true 104 74 152

triangle
false
0
Polygon -7500403 true true 150 30 15 255 285 255

triangle 2
false
0
Polygon -7500403 true true 150 30 15 255 285 255
Polygon -16777216 true false 151 99 225 223 75 224

truck
false
0
Rectangle -7500403 true true 4 45 195 187
Polygon -7500403 true true 296 193 296 150 259 134 244 104 208 104 207 194
Rectangle -1 true false 195 60 195 105
Polygon -16777216 true false 238 112 252 141 219 141 218 112
Circle -16777216 true false 234 174 42
Rectangle -7500403 true true 181 185 214 194
Circle -16777216 true false 144 174 42
Circle -16777216 true false 24 174 42
Circle -7500403 false true 24 174 42
Circle -7500403 false true 144 174 42
Circle -7500403 false true 234 174 42

turtle
true
0
Polygon -10899396 true false 215 204 240 233 246 254 228 266 215 252 193 210
Polygon -10899396 true false 195 90 225 75 245 75 260 89 269 108 261 124 240 105 225 105 210 105
Polygon -10899396 true false 105 90 75 75 55 75 40 89 31 108 39 124 60 105 75 105 90 105
Polygon -10899396 true false 132 85 134 64 107 51 108 17 150 2 192 18 192 52 169 65 172 87
Polygon -10899396 true false 85 204 60 233 54 254 72 266 85 252 107 210
Polygon -7500403 true true 119 75 179 75 209 101 224 135 220 225 175 261 128 261 81 224 74 135 88 99

wheel
false
0
Circle -7500403 true true 3 3 294
Circle -16777216 true false 30 30 240
Line -7500403 true 150 285 150 15
Line -7500403 true 15 150 285 150
Circle -7500403 true true 120 120 60
Line -7500403 true 216 40 79 269
Line -7500403 true 40 84 269 221
Line -7500403 true 40 216 269 79
Line -7500403 true 84 40 221 269

wolf
false
0
Polygon -16777216 true false 253 133 245 131 245 133
Polygon -7500403 true true 2 194 13 197 30 191 38 193 38 205 20 226 20 257 27 265 38 266 40 260 31 253 31 230 60 206 68 198 75 209 66 228 65 243 82 261 84 268 100 267 103 261 77 239 79 231 100 207 98 196 119 201 143 202 160 195 166 210 172 213 173 238 167 251 160 248 154 265 169 264 178 247 186 240 198 260 200 271 217 271 219 262 207 258 195 230 192 198 210 184 227 164 242 144 259 145 284 151 277 141 293 140 299 134 297 127 273 119 270 105
Polygon -7500403 true true -1 195 14 180 36 166 40 153 53 140 82 131 134 133 159 126 188 115 227 108 236 102 238 98 268 86 269 92 281 87 269 103 269 113

x
false
0
Polygon -7500403 true true 270 75 225 30 30 225 75 270
Polygon -7500403 true true 30 75 75 30 270 225 225 270
@#$#@#$#@
NetLogo 3D 6.0.4
@#$#@#$#@
need-to-manually-make-preview-for-this-model
@#$#@#$#@
@#$#@#$#@
<experiments>
  <experiment name="full-experiment" repetitions="1" runMetricsEveryStep="false">
    <setup>setup
setup-turtles</setup>
    <go>go</go>
    <timeLimit steps="50"/>
    <metric>count turtles</metric>
    <enumeratedValueSet variable="disturbance-intensities">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="seastar-desiccation-coef">
      <value value="0.05"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="starting-mussels">
      <value value="1000"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="disturbance-freq">
      <value value="182.5"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="predation-intensity">
      <value value="1"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="growth-param">
      <value value="-7.0E-4"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="bed-thickness">
      <value value="1"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="protection">
      <value value="1"/>
    </enumeratedValueSet>
  </experiment>
</experiments>
@#$#@#$#@
@#$#@#$#@
default
0.0
-0.2 0 0.0 1.0
0.0 1 1.0 0.0
0.2 0 0.0 1.0
link direction
true
0
Line -7500403 true 150 150 90 180
Line -7500403 true 150 150 210 180
@#$#@#$#@
0
@#$#@#$#@
